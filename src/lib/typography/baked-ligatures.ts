export class LigatureTable<const T extends Record<keyof T, string>> {
    constructor(
        readonly name: string,
        readonly map: T
    ) {}

    union<U extends Record<keyof U, string>>(
        other: LigatureTable<U>
    ): LigatureTable<T & U> {
        return new LigatureTable(`${this.name} & ${other.name}`, {
            ...this.map,
            ...other.map
        })
    }

    get(key: keyof T): string {
        return this.map[key]
    }
}

export interface Category<Replacers extends Replacer[]> {
    caption: string
    replacers: Replacers
}

export type ReplaceStr<S extends string> =
    S extends `${infer Replace} | ${infer Caption} ([ ${infer With} ])`
        ? [Replace, Caption, With]
        : never

export type TA = ReplaceStr<"<-- | Left Arrow ([ ‚Üê ])">

export function replacer<
    Caption extends string,
    Input extends string,
    Output extends string
>(
    caption: Caption,
    input: Input,
    output: Output
): {
    [inp in Input]: `${Caption} ([ ${Output} ])`
} {
    return {
        [input as Input]: null!
    } as any
}

export function category<
    Replacers extends {
        [x: string]: readonly [string, string]
    }[]
>(caption: string, ...replacers: Replacers) {
    return {
        ...replacers
    }
}

export const replacers = [
    category(
        "Arrows",
        replacer("Left Arrow", "<--", "‚Üê"),
        replacer("Left Wavey Arrow", "<~~", "‚Üú"),
        replacer("Left Double Arrow", "<==", "‚áê"),
        replacer("Left Long Arrow", "<---", "‚üµ"),
        replacer("Left Long Double Arrow", "<===", "‚ü∏"),
        replacer("Left Tailed Arrow", "<--|", "‚Ü§"),
        replacer("Left Long Tailed Arrow", "<---|", "‚üª"),
        replacer("Left Barb Arrow", "<<--", "ü°∞"),
        replacer("Left Heavy Barb Arrow", "<<--", "ü°∏"),
        replacer("Left Heavy-2 Barb Arrow", "<<<--", "ü¢Ä"),
        replacer("Left Triangle Arrow", "<|--", "ü†à"),
        replacer("Left Thick Triangle Arrow", "<<|--", "ü°Ñ"),
        replacer("Left Two-Stacked Arrows", "<--<--", "‚áá"),
        replacer("Left Three-Stacked Arrows", "<--<--<--", "‚¨±"),
        replacer("Left Arrowhead", "<|", "‚Æú"),
        replacer("Left Hooked Arrow", "<-*", "‚Ü©"),
        replacer("Counter-Clockwise Circle Arrow", "@^", "‚Ü∫"),
        replacer("Left Tailed Double Arrow", "<=|", "‚§Ü"),
        replacer("Left Zigzag Arrow", "<~-", "‚áú"),
        replacer("Left Long Zigzag Arrow", "<~~-", "‚¨≥")
    )
]
export const Arrows = new LigatureTable("Arrows", {
    "<--": "‚Üê",
    "<~~": "‚Üú",
    "<~~>": "‚Ü≠",
    "~~>": "‚Üù",
    "<---": "‚üµ", // Long left arrow
    "<--<--": "‚áá",
    "--->": "‚ü∂", // Long right arrow
    "-->": "‚Üí",
    "-->-->": "‚áâ",
    "<-->": "‚Üî",
    "<--->": "‚ü∑", // Long left-right arrow
    "--><--": "‚áÑ",
    "<==": "‚áê",
    "<===": "‚ü∏", // Long left double arrow
    "==>": "‚áí",
    "===>": "‚üπ", // Long right double arrow
    "<==>": "‚áî",
    "<===>": "‚ü∫", // Long left-right double arrow
    "<--|": "‚Ü§",
    "<---|": "‚üª", // Long left arrow with tail
    "|-->": "‚Ü¶",
    "|--->": "‚üº", // Long right arrow with tail

    "-->>": "ü°∫",
    "<<--": "ü°∏",
    "|^|": "‚Üë",
    "|v|": "‚Üì",
    "|^v|": "‚Üï",
    "|v^|": "‚Üï",
    "*->": "‚Ü™",
    "<-*": "‚Ü©"
})

export const NumericRelations = new LigatureTable("NumericRelations", {
    ">=": "‚â•",
    "=>": "‚â•",
    "<=": "‚â§",
    "=<": "‚â§",
    "=/=": "‚â†",
    ">>": "‚â´",
    "<<": "‚â™",
    ">>>": "‚ãô",
    "<<<": "‚ãò",
    "~=": "‚âÖ",
    "=~": "‚âÖ",
    "~~": "‚âà"
})

export const Operators = new LigatureTable("Operators", {
    "+-": "¬±",
    "-+": "‚àì",
    "-:": "√∑",
    ":-": "√∑",
    "(+)": "‚äï",
    "(-)": "‚äñ"
})

export const Typography = new LigatureTable("Typography", {
    "--": "‚Äì",
    "---": "‚Äî",
    "...": "‚Ä¶",
    ".-.": "‚ãØ",
    ";": "\u2006", // 6-per-em space
    ";;": "\u2000", // en space
    ";;;": "\u2003", // em space
    ",": "\u200D", // zero-width joiner
    ",,": "\u00A0", // non-breaking space
    "o=o": "‚àû",
    "(/)": "‚àÖ",
    "(c)": "¬©",
    "(r)": "¬Æ",
    "(tm)": "‚Ñ¢",
    "(S)": "¬ß",
    "(P)": "¬∂",
    "*+": "‚Ä†",
    "*++": "‚Ä°"
})

export const Fractions = new LigatureTable("Fractions", {
    "{1/2}": "¬Ω",
    "{1/3}": "‚Öì",
    "{2/3}": "‚Öî",
    "{1/4}": "¬º",
    "{2/4}": "¬Ω",
    "{3/4}": "¬æ",
    "{1/5}": "‚Öï",
    "{2/5}": "‚Öñ",
    "{3/5}": "‚Öó",
    "{4/5}": "‚Öò",
    "{1/6}": "‚Öô",
    "{2/6}": "‚Öì",
    "{3/6}": "¬Ω",
    "{4/6}": "‚Öî",
    "{5/6}": "‚Öö"
})

export const Marks = new LigatureTable("Marks", {
    "[ ]": "‚¨ö",
    "[x]": "‚ÆΩ",
    "[v]": "üóπ",
    "~x~": "‚úò",
    "~v~": "‚úî"
})
